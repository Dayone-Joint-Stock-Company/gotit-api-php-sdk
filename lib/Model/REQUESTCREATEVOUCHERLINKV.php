<?php
/**
 * REQUESTCREATEVOUCHERLINKV
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sample API
 *
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * REQUESTCREATEVOUCHERLINKV Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class REQUESTCREATEVOUCHERLINKV implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'REQUEST_CREATE_VOUCHER_LINK_V';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_id' => 'int',
        'product_price_id' => 'int',
        'quantity' => 'int',
        'order_name' => 'string',
        'expiry_date' => 'string',
        'transaction_ref_id' => 'string',
        'use_otp' => 'int',
        'otp_type' => 'int',
        'password' => 'string',
        'receiver_name' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'signature' => 'string',
        'active_date' => 'string',
        'is_convert_to_cover_link' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_id' => null,
        'product_price_id' => null,
        'quantity' => null,
        'order_name' => null,
        'expiry_date' => null,
        'transaction_ref_id' => null,
        'use_otp' => null,
        'otp_type' => null,
        'password' => null,
        'receiver_name' => null,
        'phone' => null,
        'email' => null,
        'signature' => null,
        'active_date' => null,
        'is_convert_to_cover_link' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_id' => false,
        'product_price_id' => false,
        'quantity' => false,
        'order_name' => false,
        'expiry_date' => false,
        'transaction_ref_id' => false,
        'use_otp' => false,
        'otp_type' => false,
        'password' => false,
        'receiver_name' => false,
        'phone' => false,
        'email' => false,
        'signature' => false,
        'active_date' => false,
        'is_convert_to_cover_link' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_id' => 'productId',
        'product_price_id' => 'productPriceId',
        'quantity' => 'quantity',
        'order_name' => 'orderName',
        'expiry_date' => 'expiryDate',
        'transaction_ref_id' => 'transactionRefId',
        'use_otp' => 'use_otp',
        'otp_type' => 'otp_type',
        'password' => 'password',
        'receiver_name' => 'receiver_name',
        'phone' => 'phone',
        'email' => 'email',
        'signature' => 'signature',
        'active_date' => 'activeDate',
        'is_convert_to_cover_link' => 'isConvertToCoverLink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_id' => 'setProductId',
        'product_price_id' => 'setProductPriceId',
        'quantity' => 'setQuantity',
        'order_name' => 'setOrderName',
        'expiry_date' => 'setExpiryDate',
        'transaction_ref_id' => 'setTransactionRefId',
        'use_otp' => 'setUseOtp',
        'otp_type' => 'setOtpType',
        'password' => 'setPassword',
        'receiver_name' => 'setReceiverName',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'signature' => 'setSignature',
        'active_date' => 'setActiveDate',
        'is_convert_to_cover_link' => 'setIsConvertToCoverLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_id' => 'getProductId',
        'product_price_id' => 'getProductPriceId',
        'quantity' => 'getQuantity',
        'order_name' => 'getOrderName',
        'expiry_date' => 'getExpiryDate',
        'transaction_ref_id' => 'getTransactionRefId',
        'use_otp' => 'getUseOtp',
        'otp_type' => 'getOtpType',
        'password' => 'getPassword',
        'receiver_name' => 'getReceiverName',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'signature' => 'getSignature',
        'active_date' => 'getActiveDate',
        'is_convert_to_cover_link' => 'getIsConvertToCoverLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_price_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('order_name', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('transaction_ref_id', $data ?? [], null);
        $this->setIfExists('use_otp', $data ?? [], null);
        $this->setIfExists('otp_type', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('receiver_name', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('active_date', $data ?? [], null);
        $this->setIfExists('is_convert_to_cover_link', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['product_price_id'] === null) {
            $invalidProperties[] = "'product_price_id' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['order_name'] === null) {
            $invalidProperties[] = "'order_name' can't be null";
        }
        if ($this->container['expiry_date'] === null) {
            $invalidProperties[] = "'expiry_date' can't be null";
        }
        if ($this->container['transaction_ref_id'] === null) {
            $invalidProperties[] = "'transaction_ref_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id Product id. You can see the Products section for the product id. Note: productId type auto convert merchant code does not support creating cover links.
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_price_id
     *
     * @return int
     */
    public function getProductPriceId()
    {
        return $this->container['product_price_id'];
    }

    /**
     * Sets product_price_id
     *
     * @param int $product_price_id Product price id. Each product will have 1 or more denomination codes corresponding to the value or converted product size.
     *
     * @return self
     */
    public function setProductPriceId($product_price_id)
    {
        if (is_null($product_price_id)) {
            throw new \InvalidArgumentException('non-nullable product_price_id cannot be null');
        }
        $this->container['product_price_id'] = $product_price_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Number of vouchers to be issued
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets order_name
     *
     * @return string
     */
    public function getOrderName()
    {
        return $this->container['order_name'];
    }

    /**
     * Sets order_name
     *
     * @param string $order_name Please don't use the voucher recipient or the content changes daily or frequently. Owl French: Customers specified name + [Month] + [Year] Example: Got It Promotion - Jul 2019
     *
     * @return self
     */
    public function setOrderName($order_name)
    {
        if (is_null($order_name)) {
            throw new \InvalidArgumentException('non-nullable order_name cannot be null');
        }
        $this->container['order_name'] = $order_name;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string $expiry_date Voucher expiration date. Syntax 'YYYY-MM-DD'. The expiration date is specified specified in the contract between the partner and Got It, usually 3 months from the release date, maximum 12 months.
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        if (is_null($expiry_date)) {
            throw new \InvalidArgumentException('non-nullable expiry_date cannot be null');
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets transaction_ref_id
     *
     * @return string
     */
    public function getTransactionRefId()
    {
        return $this->container['transaction_ref_id'];
    }

    /**
     * Sets transaction_ref_id
     *
     * @param string $transaction_ref_id Transaction code receive from the customer request, used for comparison and reconciliation. If the transaction fails, after 5 mintegerues, you can use this transmitted transactionRefID to request again. Maximum 255 characters. Format of transactionRefId: prefix + '_' + character string In which: + prefix: string of 06 integer characters provided by Got It. + character string: string actively generated by clients Example: prefix: '000742' character string: '20220126-6f823f2e' => transactionRefId: '000742_20220126-6f823f2e'
     *
     * @return self
     */
    public function setTransactionRefId($transaction_ref_id)
    {
        if (is_null($transaction_ref_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_ref_id cannot be null');
        }
        $this->container['transaction_ref_id'] = $transaction_ref_id;

        return $this;
    }

    /**
     * Gets use_otp
     *
     * @return int|null
     */
    public function getUseOtp()
    {
        return $this->container['use_otp'];
    }

    /**
     * Sets use_otp
     *
     * @param int|null $use_otp = 1 if the end user is required to enter a password to view the voucher. Example: 1
     *
     * @return self
     */
    public function setUseOtp($use_otp)
    {
        if (is_null($use_otp)) {
            throw new \InvalidArgumentException('non-nullable use_otp cannot be null');
        }
        $this->container['use_otp'] = $use_otp;

        return $this;
    }

    /**
     * Gets otp_type
     *
     * @return int|null
     */
    public function getOtpType()
    {
        return $this->container['otp_type'];
    }

    /**
     * Sets otp_type
     *
     * @param int|null $otp_type = 1 if OTP is sent via phone number; = 7 if OTP is sent via email; = 8 if password Password is a fixed number - passed in param 'password' For example: 1
     *
     * @return self
     */
    public function setOtpType($otp_type)
    {
        if (is_null($otp_type)) {
            throw new \InvalidArgumentException('non-nullable otp_type cannot be null');
        }
        $this->container['otp_type'] = $otp_type;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Fixed password (corresponding to otp_type=8 passed in parram 'otp_type'. For otp_type = 1 or 7 do not need to be passed integero this field). Format requirement: 6 consecutive integer characters Example: '325243'
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets receiver_name
     *
     * @return string|null
     */
    public function getReceiverName()
    {
        return $this->container['receiver_name'];
    }

    /**
     * Sets receiver_name
     *
     * @param string|null $receiver_name Voucher recipient name Example: Son Tran
     *
     * @return self
     */
    public function setReceiverName($receiver_name)
    {
        if (is_null($receiver_name)) {
            throw new \InvalidArgumentException('non-nullable receiver_name cannot be null');
        }
        $this->container['receiver_name'] = $receiver_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number to receive the voucher. This is only the step to identify the phone number that will receive the voucher. This step has not been completed yet. Sending vouchers, sending vouchers via SMS will be a separate API section. This phone number is also used to receive OTP when the end-user opens the voucher link, respectively otp_type = 1. Request format: 10 consecutive integer characters. For example: 0909xxxxxx
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email to receive the voucher. This is just the step to identify the email address that will receive the voucher. This step does not include sending the voucher, sending the voucher via email will be a separate API section. This email address is also used to receive OTP when the end-user opens the voucher link, corresponding to otp_type = 7 . For example: son.tran@ dayone.vn
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature RSA encryption, used for client authentication
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            throw new \InvalidArgumentException('non-nullable signature cannot be null');
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets active_date
     *
     * @return string|null
     */
    public function getActiveDate()
    {
        return $this->container['active_date'];
    }

    /**
     * Sets active_date
     *
     * @param string|null $active_date Voucher validity start date, validity date must be greater than issue date. Format: 'YYYY-MM-DD'. Note: before this date, the voucher will be in Inactive status and cannot be used.
     *
     * @return self
     */
    public function setActiveDate($active_date)
    {
        if (is_null($active_date)) {
            throw new \InvalidArgumentException('non-nullable active_date cannot be null');
        }
        $this->container['active_date'] = $active_date;

        return $this;
    }

    /**
     * Gets is_convert_to_cover_link
     *
     * @return int|null
     */
    public function getIsConvertToCoverLink()
    {
        return $this->container['is_convert_to_cover_link'];
    }

    /**
     * Sets is_convert_to_cover_link
     *
     * @param int|null $is_convert_to_cover_link Type of voucher link to be issued: If = 0 (default): Create voucher link. If = 1: Create cover link for voucher link.
     *
     * @return self
     */
    public function setIsConvertToCoverLink($is_convert_to_cover_link)
    {
        if (is_null($is_convert_to_cover_link)) {
            throw new \InvalidArgumentException('non-nullable is_convert_to_cover_link cannot be null');
        }
        $this->container['is_convert_to_cover_link'] = $is_convert_to_cover_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


