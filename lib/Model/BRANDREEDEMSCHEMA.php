<?php
/**
 * BRANDREEDEMSCHEMA
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sample API
 *
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BRANDREEDEMSCHEMA Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BRANDREEDEMSCHEMA implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BRAND_REEDEM_SCHEMA';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brand_id' => 'int',
        'brand_name' => 'string',
        'brand_logo' => 'string',
        'brand_name_slug' => 'string',
        'brand_phone' => 'string',
        'brand_address' => 'string',
        'brand_desc' => 'string',
        'brand_service_guide' => 'string',
        'category_id' => 'int',
        'category_nm' => 'string',
        'category_img' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'brand_id' => null,
        'brand_name' => null,
        'brand_logo' => null,
        'brand_name_slug' => null,
        'brand_phone' => null,
        'brand_address' => null,
        'brand_desc' => null,
        'brand_service_guide' => null,
        'category_id' => null,
        'category_nm' => null,
        'category_img' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'brand_id' => true,
        'brand_name' => true,
        'brand_logo' => true,
        'brand_name_slug' => true,
        'brand_phone' => true,
        'brand_address' => true,
        'brand_desc' => true,
        'brand_service_guide' => true,
        'category_id' => true,
        'category_nm' => true,
        'category_img' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand_id' => 'brandID',
        'brand_name' => 'brandName',
        'brand_logo' => 'brandLogo',
        'brand_name_slug' => 'brandNameSlug',
        'brand_phone' => 'brandPhone',
        'brand_address' => 'brandAddress',
        'brand_desc' => 'brandDesc',
        'brand_service_guide' => 'brandServiceGuide',
        'category_id' => 'categoryId',
        'category_nm' => 'categoryNm',
        'category_img' => 'categoryImg'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand_id' => 'setBrandId',
        'brand_name' => 'setBrandName',
        'brand_logo' => 'setBrandLogo',
        'brand_name_slug' => 'setBrandNameSlug',
        'brand_phone' => 'setBrandPhone',
        'brand_address' => 'setBrandAddress',
        'brand_desc' => 'setBrandDesc',
        'brand_service_guide' => 'setBrandServiceGuide',
        'category_id' => 'setCategoryId',
        'category_nm' => 'setCategoryNm',
        'category_img' => 'setCategoryImg'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand_id' => 'getBrandId',
        'brand_name' => 'getBrandName',
        'brand_logo' => 'getBrandLogo',
        'brand_name_slug' => 'getBrandNameSlug',
        'brand_phone' => 'getBrandPhone',
        'brand_address' => 'getBrandAddress',
        'brand_desc' => 'getBrandDesc',
        'brand_service_guide' => 'getBrandServiceGuide',
        'category_id' => 'getCategoryId',
        'category_nm' => 'getCategoryNm',
        'category_img' => 'getCategoryImg'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('brand_id', $data ?? [], null);
        $this->setIfExists('brand_name', $data ?? [], null);
        $this->setIfExists('brand_logo', $data ?? [], null);
        $this->setIfExists('brand_name_slug', $data ?? [], null);
        $this->setIfExists('brand_phone', $data ?? [], null);
        $this->setIfExists('brand_address', $data ?? [], null);
        $this->setIfExists('brand_desc', $data ?? [], null);
        $this->setIfExists('brand_service_guide', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('category_nm', $data ?? [], null);
        $this->setIfExists('category_img', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand_id
     *
     * @return int|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param int|null $brand_id Brand id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if (is_null($brand_id)) {
            array_push($this->openAPINullablesSetToNull, 'brand_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name Brand name
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        if (is_null($brand_name)) {
            array_push($this->openAPINullablesSetToNull, 'brand_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets brand_logo
     *
     * @return string|null
     */
    public function getBrandLogo()
    {
        return $this->container['brand_logo'];
    }

    /**
     * Sets brand_logo
     *
     * @param string|null $brand_logo Link to brand logo image
     *
     * @return self
     */
    public function setBrandLogo($brand_logo)
    {
        if (is_null($brand_logo)) {
            array_push($this->openAPINullablesSetToNull, 'brand_logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_logo'] = $brand_logo;

        return $this;
    }

    /**
     * Gets brand_name_slug
     *
     * @return string|null
     */
    public function getBrandNameSlug()
    {
        return $this->container['brand_name_slug'];
    }

    /**
     * Sets brand_name_slug
     *
     * @param string|null $brand_name_slug Brand name slug
     *
     * @return self
     */
    public function setBrandNameSlug($brand_name_slug)
    {
        if (is_null($brand_name_slug)) {
            array_push($this->openAPINullablesSetToNull, 'brand_name_slug');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_name_slug', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_name_slug'] = $brand_name_slug;

        return $this;
    }

    /**
     * Gets brand_phone
     *
     * @return string|null
     */
    public function getBrandPhone()
    {
        return $this->container['brand_phone'];
    }

    /**
     * Sets brand_phone
     *
     * @param string|null $brand_phone Brand Phone Number
     *
     * @return self
     */
    public function setBrandPhone($brand_phone)
    {
        if (is_null($brand_phone)) {
            array_push($this->openAPINullablesSetToNull, 'brand_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_phone'] = $brand_phone;

        return $this;
    }

    /**
     * Gets brand_address
     *
     * @return string|null
     */
    public function getBrandAddress()
    {
        return $this->container['brand_address'];
    }

    /**
     * Sets brand_address
     *
     * @param string|null $brand_address Address of brand
     *
     * @return self
     */
    public function setBrandAddress($brand_address)
    {
        if (is_null($brand_address)) {
            array_push($this->openAPINullablesSetToNull, 'brand_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_address'] = $brand_address;

        return $this;
    }

    /**
     * Gets brand_desc
     *
     * @return string|null
     */
    public function getBrandDesc()
    {
        return $this->container['brand_desc'];
    }

    /**
     * Sets brand_desc
     *
     * @param string|null $brand_desc Brand Description
     *
     * @return self
     */
    public function setBrandDesc($brand_desc)
    {
        if (is_null($brand_desc)) {
            array_push($this->openAPINullablesSetToNull, 'brand_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_desc'] = $brand_desc;

        return $this;
    }

    /**
     * Gets brand_service_guide
     *
     * @return string|null
     */
    public function getBrandServiceGuide()
    {
        return $this->container['brand_service_guide'];
    }

    /**
     * Sets brand_service_guide
     *
     * @param string|null $brand_service_guide Describe the brand's terms of reference (T&C). HTML format
     *
     * @return self
     */
    public function setBrandServiceGuide($brand_service_guide)
    {
        if (is_null($brand_service_guide)) {
            array_push($this->openAPINullablesSetToNull, 'brand_service_guide');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_service_guide', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_service_guide'] = $brand_service_guide;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id Category Id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            array_push($this->openAPINullablesSetToNull, 'category_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_nm
     *
     * @return string|null
     */
    public function getCategoryNm()
    {
        return $this->container['category_nm'];
    }

    /**
     * Sets category_nm
     *
     * @param string|null $category_nm Category Name
     *
     * @return self
     */
    public function setCategoryNm($category_nm)
    {
        if (is_null($category_nm)) {
            array_push($this->openAPINullablesSetToNull, 'category_nm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_nm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_nm'] = $category_nm;

        return $this;
    }

    /**
     * Gets category_img
     *
     * @return string|null
     */
    public function getCategoryImg()
    {
        return $this->container['category_img'];
    }

    /**
     * Sets category_img
     *
     * @param string|null $category_img Category Image Logo
     *
     * @return self
     */
    public function setCategoryImg($category_img)
    {
        if (is_null($category_img)) {
            array_push($this->openAPINullablesSetToNull, 'category_img');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_img', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_img'] = $category_img;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


