<?php
/**
 * VOUCHERVSCHEMA
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sample API
 *
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VOUCHERVSCHEMA Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VOUCHERVSCHEMA implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VOUCHER_V_SCHEMA';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_ref_id' => 'string',
        'voucher_code' => 'string',
        'voucher_link' => 'string',
        'voucher_link_code' => 'string',
        'voucher_image_link' => 'string',
        'voucher_cover_link' => 'string',
        'voucher_cover_link_code' => 'string',
        'voucher_serial' => 'string',
        'expiry_date' => 'string',
        'product' => '\OpenAPI\Client\Model\VOUCHERVSCHEMAProduct'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_ref_id' => null,
        'voucher_code' => null,
        'voucher_link' => null,
        'voucher_link_code' => null,
        'voucher_image_link' => null,
        'voucher_cover_link' => null,
        'voucher_cover_link_code' => null,
        'voucher_serial' => null,
        'expiry_date' => null,
        'product' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transaction_ref_id' => true,
        'voucher_code' => true,
        'voucher_link' => true,
        'voucher_link_code' => true,
        'voucher_image_link' => true,
        'voucher_cover_link' => true,
        'voucher_cover_link_code' => true,
        'voucher_serial' => true,
        'expiry_date' => true,
        'product' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_ref_id' => 'transactionRefId',
        'voucher_code' => 'voucherCode',
        'voucher_link' => 'voucherLink',
        'voucher_link_code' => 'voucherLinkCode',
        'voucher_image_link' => 'voucherImageLink',
        'voucher_cover_link' => 'voucherCoverLink',
        'voucher_cover_link_code' => 'voucherCoverLinkCode',
        'voucher_serial' => 'voucherSerial',
        'expiry_date' => 'expiryDate',
        'product' => 'product'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_ref_id' => 'setTransactionRefId',
        'voucher_code' => 'setVoucherCode',
        'voucher_link' => 'setVoucherLink',
        'voucher_link_code' => 'setVoucherLinkCode',
        'voucher_image_link' => 'setVoucherImageLink',
        'voucher_cover_link' => 'setVoucherCoverLink',
        'voucher_cover_link_code' => 'setVoucherCoverLinkCode',
        'voucher_serial' => 'setVoucherSerial',
        'expiry_date' => 'setExpiryDate',
        'product' => 'setProduct'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_ref_id' => 'getTransactionRefId',
        'voucher_code' => 'getVoucherCode',
        'voucher_link' => 'getVoucherLink',
        'voucher_link_code' => 'getVoucherLinkCode',
        'voucher_image_link' => 'getVoucherImageLink',
        'voucher_cover_link' => 'getVoucherCoverLink',
        'voucher_cover_link_code' => 'getVoucherCoverLinkCode',
        'voucher_serial' => 'getVoucherSerial',
        'expiry_date' => 'getExpiryDate',
        'product' => 'getProduct'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('transaction_ref_id', $data ?? [], null);
        $this->setIfExists('voucher_code', $data ?? [], null);
        $this->setIfExists('voucher_link', $data ?? [], null);
        $this->setIfExists('voucher_link_code', $data ?? [], null);
        $this->setIfExists('voucher_image_link', $data ?? [], null);
        $this->setIfExists('voucher_cover_link', $data ?? [], null);
        $this->setIfExists('voucher_cover_link_code', $data ?? [], null);
        $this->setIfExists('voucher_serial', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_ref_id
     *
     * @return string|null
     */
    public function getTransactionRefId()
    {
        return $this->container['transaction_ref_id'];
    }

    /**
     * Sets transaction_ref_id
     *
     * @param string|null $transaction_ref_id TransactionRefId receive from client request
     *
     * @return self
     */
    public function setTransactionRefId($transaction_ref_id)
    {
        if (is_null($transaction_ref_id)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_ref_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_ref_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_ref_id'] = $transaction_ref_id;

        return $this;
    }

    /**
     * Gets voucher_code
     *
     * @return string|null
     */
    public function getVoucherCode()
    {
        return $this->container['voucher_code'];
    }

    /**
     * Sets voucher_code
     *
     * @param string|null $voucher_code Voucher code. Contains 10 numbers, unique and not duplicated with any other voucher. For some brands that do not use Got It code but use integerernal code (Big C, Mobile World), the system returns the integerernal code.
     *
     * @return self
     */
    public function setVoucherCode($voucher_code)
    {
        if (is_null($voucher_code)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_code'] = $voucher_code;

        return $this;
    }

    /**
     * Gets voucher_link
     *
     * @return string|null
     */
    public function getVoucherLink()
    {
        return $this->container['voucher_link'];
    }

    /**
     * Sets voucher_link
     *
     * @param string|null $voucher_link Link of voucher
     *
     * @return self
     */
    public function setVoucherLink($voucher_link)
    {
        if (is_null($voucher_link)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_link'] = $voucher_link;

        return $this;
    }

    /**
     * Gets voucher_link_code
     *
     * @return string|null
     */
    public function getVoucherLinkCode()
    {
        return $this->container['voucher_link_code'];
    }

    /**
     * Sets voucher_link_code
     *
     * @param string|null $voucher_link_code Last 8 characters of voucher link
     *
     * @return self
     */
    public function setVoucherLinkCode($voucher_link_code)
    {
        if (is_null($voucher_link_code)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_link_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_link_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_link_code'] = $voucher_link_code;

        return $this;
    }

    /**
     * Gets voucher_image_link
     *
     * @return string|null
     */
    public function getVoucherImageLink()
    {
        return $this->container['voucher_image_link'];
    }

    /**
     * Sets voucher_image_link
     *
     * @param string|null $voucher_image_link Link of voucher image. To display vouchers as images
     *
     * @return self
     */
    public function setVoucherImageLink($voucher_image_link)
    {
        if (is_null($voucher_image_link)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_image_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_image_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_image_link'] = $voucher_image_link;

        return $this;
    }

    /**
     * Gets voucher_cover_link
     *
     * @return string|null
     */
    public function getVoucherCoverLink()
    {
        return $this->container['voucher_cover_link'];
    }

    /**
     * Sets voucher_cover_link
     *
     * @param string|null $voucher_cover_link Cover link of voucher.
     *
     * @return self
     */
    public function setVoucherCoverLink($voucher_cover_link)
    {
        if (is_null($voucher_cover_link)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_cover_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_cover_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_cover_link'] = $voucher_cover_link;

        return $this;
    }

    /**
     * Gets voucher_cover_link_code
     *
     * @return string|null
     */
    public function getVoucherCoverLinkCode()
    {
        return $this->container['voucher_cover_link_code'];
    }

    /**
     * Sets voucher_cover_link_code
     *
     * @param string|null $voucher_cover_link_code Last 8 characters of voucher cover link
     *
     * @return self
     */
    public function setVoucherCoverLinkCode($voucher_cover_link_code)
    {
        if (is_null($voucher_cover_link_code)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_cover_link_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_cover_link_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_cover_link_code'] = $voucher_cover_link_code;

        return $this;
    }

    /**
     * Gets voucher_serial
     *
     * @return string|null
     */
    public function getVoucherSerial()
    {
        return $this->container['voucher_serial'];
    }

    /**
     * Sets voucher_serial
     *
     * @param string|null $voucher_serial Is a unique code to identify voucher link v and is not valid for use. For example: V1562342ET2
     *
     * @return self
     */
    public function setVoucherSerial($voucher_serial)
    {
        if (is_null($voucher_serial)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_serial');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_serial', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_serial'] = $voucher_serial;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string|null $expiry_date Voucher expiration date
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        if (is_null($expiry_date)) {
            array_push($this->openAPINullablesSetToNull, 'expiry_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiry_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPI\Client\Model\VOUCHERVSCHEMAProduct|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPI\Client\Model\VOUCHERVSCHEMAProduct|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            array_push($this->openAPINullablesSetToNull, 'product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product'] = $product;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


