<?php
/**
 * STORESSCHEMA
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sample API
 *
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * STORESSCHEMA Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class STORESSCHEMA implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'STORES_SCHEMA';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'store_id' => 'int',
        'store_nm' => 'string',
        'store_addr' => 'string',
        'store_em' => 'string',
        'store_ph' => 'string',
        'lat' => 'float',
        'long' => 'float',
        'brand_nm' => 'string',
        'district_id' => 'int',
        'district_nm' => 'string',
        'city_id' => 'int',
        'city_nm' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'store_id' => null,
        'store_nm' => null,
        'store_addr' => null,
        'store_em' => null,
        'store_ph' => null,
        'lat' => 'float',
        'long' => 'float',
        'brand_nm' => null,
        'district_id' => null,
        'district_nm' => null,
        'city_id' => null,
        'city_nm' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'store_id' => true,
        'store_nm' => true,
        'store_addr' => true,
        'store_em' => true,
        'store_ph' => true,
        'lat' => true,
        'long' => true,
        'brand_nm' => true,
        'district_id' => true,
        'district_nm' => true,
        'city_id' => true,
        'city_nm' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'storeId',
        'store_nm' => 'storeNm',
        'store_addr' => 'storeAddr',
        'store_em' => 'storeEm',
        'store_ph' => 'storePh',
        'lat' => 'lat',
        'long' => 'long',
        'brand_nm' => 'brandNm',
        'district_id' => 'districtId',
        'district_nm' => 'districtNm',
        'city_id' => 'cityId',
        'city_nm' => 'cityNm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'store_nm' => 'setStoreNm',
        'store_addr' => 'setStoreAddr',
        'store_em' => 'setStoreEm',
        'store_ph' => 'setStorePh',
        'lat' => 'setLat',
        'long' => 'setLong',
        'brand_nm' => 'setBrandNm',
        'district_id' => 'setDistrictId',
        'district_nm' => 'setDistrictNm',
        'city_id' => 'setCityId',
        'city_nm' => 'setCityNm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'store_nm' => 'getStoreNm',
        'store_addr' => 'getStoreAddr',
        'store_em' => 'getStoreEm',
        'store_ph' => 'getStorePh',
        'lat' => 'getLat',
        'long' => 'getLong',
        'brand_nm' => 'getBrandNm',
        'district_id' => 'getDistrictId',
        'district_nm' => 'getDistrictNm',
        'city_id' => 'getCityId',
        'city_nm' => 'getCityNm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('store_nm', $data ?? [], null);
        $this->setIfExists('store_addr', $data ?? [], null);
        $this->setIfExists('store_em', $data ?? [], null);
        $this->setIfExists('store_ph', $data ?? [], null);
        $this->setIfExists('lat', $data ?? [], null);
        $this->setIfExists('long', $data ?? [], null);
        $this->setIfExists('brand_nm', $data ?? [], null);
        $this->setIfExists('district_id', $data ?? [], null);
        $this->setIfExists('district_nm', $data ?? [], null);
        $this->setIfExists('city_id', $data ?? [], null);
        $this->setIfExists('city_nm', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return int|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param int|null $store_id Store Id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            array_push($this->openAPINullablesSetToNull, 'store_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets store_nm
     *
     * @return string|null
     */
    public function getStoreNm()
    {
        return $this->container['store_nm'];
    }

    /**
     * Sets store_nm
     *
     * @param string|null $store_nm Store Name
     *
     * @return self
     */
    public function setStoreNm($store_nm)
    {
        if (is_null($store_nm)) {
            array_push($this->openAPINullablesSetToNull, 'store_nm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_nm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store_nm'] = $store_nm;

        return $this;
    }

    /**
     * Gets store_addr
     *
     * @return string|null
     */
    public function getStoreAddr()
    {
        return $this->container['store_addr'];
    }

    /**
     * Sets store_addr
     *
     * @param string|null $store_addr Store Address
     *
     * @return self
     */
    public function setStoreAddr($store_addr)
    {
        if (is_null($store_addr)) {
            array_push($this->openAPINullablesSetToNull, 'store_addr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_addr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store_addr'] = $store_addr;

        return $this;
    }

    /**
     * Gets store_em
     *
     * @return string|null
     */
    public function getStoreEm()
    {
        return $this->container['store_em'];
    }

    /**
     * Sets store_em
     *
     * @param string|null $store_em Store Email
     *
     * @return self
     */
    public function setStoreEm($store_em)
    {
        if (is_null($store_em)) {
            array_push($this->openAPINullablesSetToNull, 'store_em');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_em', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store_em'] = $store_em;

        return $this;
    }

    /**
     * Gets store_ph
     *
     * @return string|null
     */
    public function getStorePh()
    {
        return $this->container['store_ph'];
    }

    /**
     * Sets store_ph
     *
     * @param string|null $store_ph Store Phone
     *
     * @return self
     */
    public function setStorePh($store_ph)
    {
        if (is_null($store_ph)) {
            array_push($this->openAPINullablesSetToNull, 'store_ph');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_ph', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store_ph'] = $store_ph;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return float|null
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param float|null $lat Lat location on Google maps
     *
     * @return self
     */
    public function setLat($lat)
    {
        if (is_null($lat)) {
            array_push($this->openAPINullablesSetToNull, 'lat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets long
     *
     * @return float|null
     */
    public function getLong()
    {
        return $this->container['long'];
    }

    /**
     * Sets long
     *
     * @param float|null $long Long location on Google maps
     *
     * @return self
     */
    public function setLong($long)
    {
        if (is_null($long)) {
            array_push($this->openAPINullablesSetToNull, 'long');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long'] = $long;

        return $this;
    }

    /**
     * Gets brand_nm
     *
     * @return string|null
     */
    public function getBrandNm()
    {
        return $this->container['brand_nm'];
    }

    /**
     * Sets brand_nm
     *
     * @param string|null $brand_nm Brand Name
     *
     * @return self
     */
    public function setBrandNm($brand_nm)
    {
        if (is_null($brand_nm)) {
            array_push($this->openAPINullablesSetToNull, 'brand_nm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_nm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_nm'] = $brand_nm;

        return $this;
    }

    /**
     * Gets district_id
     *
     * @return int|null
     */
    public function getDistrictId()
    {
        return $this->container['district_id'];
    }

    /**
     * Sets district_id
     *
     * @param int|null $district_id District code (Got It identifier)
     *
     * @return self
     */
    public function setDistrictId($district_id)
    {
        if (is_null($district_id)) {
            array_push($this->openAPINullablesSetToNull, 'district_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['district_id'] = $district_id;

        return $this;
    }

    /**
     * Gets district_nm
     *
     * @return string|null
     */
    public function getDistrictNm()
    {
        return $this->container['district_nm'];
    }

    /**
     * Sets district_nm
     *
     * @param string|null $district_nm District name
     *
     * @return self
     */
    public function setDistrictNm($district_nm)
    {
        if (is_null($district_nm)) {
            array_push($this->openAPINullablesSetToNull, 'district_nm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district_nm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['district_nm'] = $district_nm;

        return $this;
    }

    /**
     * Gets city_id
     *
     * @return int|null
     */
    public function getCityId()
    {
        return $this->container['city_id'];
    }

    /**
     * Sets city_id
     *
     * @param int|null $city_id City code (Got It identifier)
     *
     * @return self
     */
    public function setCityId($city_id)
    {
        if (is_null($city_id)) {
            array_push($this->openAPINullablesSetToNull, 'city_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city_id'] = $city_id;

        return $this;
    }

    /**
     * Gets city_nm
     *
     * @return string|null
     */
    public function getCityNm()
    {
        return $this->container['city_nm'];
    }

    /**
     * Sets city_nm
     *
     * @param string|null $city_nm City name
     *
     * @return self
     */
    public function setCityNm($city_nm)
    {
        if (is_null($city_nm)) {
            array_push($this->openAPINullablesSetToNull, 'city_nm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_nm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city_nm'] = $city_nm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


