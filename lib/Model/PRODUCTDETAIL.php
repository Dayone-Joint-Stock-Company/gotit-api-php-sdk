<?php
/**
 * PRODUCTDETAIL
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sample API
 *
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PRODUCTDETAIL Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PRODUCTDETAIL implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PRODUCT_DETAIL';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_id' => 'int',
        'product_nm' => 'string',
        'product_img' => 'string',
        'product_sub_img' => 'mixed[]',
        'brand_id' => 'int',
        'brand_nm' => 'string',
        'product_type' => 'string',
        'brand_name_slug' => 'string',
        'brand_phone' => 'string',
        'brand_address' => 'string',
        'brand_desc' => 'string',
        'brand_service_guide' => 'string',
        'service_guide' => 'string',
        'brand_logo' => 'string',
        'link' => 'string',
        'prices' => '\OpenAPI\Client\Model\PRODUCTPRICESCHEMA[]',
        'name_slug' => 'string',
        'product_desc' => 'string',
        'product_short_desc' => 'string',
        'terms' => 'string',
        'category_id' => 'int',
        'category_nm' => 'string',
        'category_img' => 'string',
        'brand_redeem' => '\OpenAPI\Client\Model\BRANDREEDEMSCHEMA[]',
        'store_list' => '\OpenAPI\Client\Model\STORESSCHEMA[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_id' => null,
        'product_nm' => null,
        'product_img' => null,
        'product_sub_img' => null,
        'brand_id' => null,
        'brand_nm' => null,
        'product_type' => null,
        'brand_name_slug' => null,
        'brand_phone' => null,
        'brand_address' => null,
        'brand_desc' => null,
        'brand_service_guide' => null,
        'service_guide' => null,
        'brand_logo' => null,
        'link' => null,
        'prices' => null,
        'name_slug' => null,
        'product_desc' => null,
        'product_short_desc' => null,
        'terms' => null,
        'category_id' => null,
        'category_nm' => null,
        'category_img' => null,
        'brand_redeem' => null,
        'store_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_id' => false,
        'product_nm' => false,
        'product_img' => false,
        'product_sub_img' => false,
        'brand_id' => false,
        'brand_nm' => false,
        'product_type' => false,
        'brand_name_slug' => false,
        'brand_phone' => false,
        'brand_address' => false,
        'brand_desc' => false,
        'brand_service_guide' => false,
        'service_guide' => false,
        'brand_logo' => false,
        'link' => false,
        'prices' => false,
        'name_slug' => false,
        'product_desc' => false,
        'product_short_desc' => false,
        'terms' => false,
        'category_id' => false,
        'category_nm' => false,
        'category_img' => false,
        'brand_redeem' => false,
        'store_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_id' => 'productId',
        'product_nm' => 'productNm',
        'product_img' => 'productImg',
        'product_sub_img' => 'productSubImg',
        'brand_id' => 'brandId',
        'brand_nm' => 'brandNm',
        'product_type' => 'productType',
        'brand_name_slug' => 'brandNameSlug',
        'brand_phone' => 'brandPhone',
        'brand_address' => 'brandAddress',
        'brand_desc' => 'brandDesc',
        'brand_service_guide' => 'brandServiceGuide',
        'service_guide' => 'serviceGuide',
        'brand_logo' => 'brandLogo',
        'link' => 'link',
        'prices' => 'prices',
        'name_slug' => 'nameSlug',
        'product_desc' => 'productDesc',
        'product_short_desc' => 'productShortDesc',
        'terms' => 'terms',
        'category_id' => 'categoryId',
        'category_nm' => 'categoryNm',
        'category_img' => 'categoryImg',
        'brand_redeem' => 'brandRedeem',
        'store_list' => 'storeList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_id' => 'setProductId',
        'product_nm' => 'setProductNm',
        'product_img' => 'setProductImg',
        'product_sub_img' => 'setProductSubImg',
        'brand_id' => 'setBrandId',
        'brand_nm' => 'setBrandNm',
        'product_type' => 'setProductType',
        'brand_name_slug' => 'setBrandNameSlug',
        'brand_phone' => 'setBrandPhone',
        'brand_address' => 'setBrandAddress',
        'brand_desc' => 'setBrandDesc',
        'brand_service_guide' => 'setBrandServiceGuide',
        'service_guide' => 'setServiceGuide',
        'brand_logo' => 'setBrandLogo',
        'link' => 'setLink',
        'prices' => 'setPrices',
        'name_slug' => 'setNameSlug',
        'product_desc' => 'setProductDesc',
        'product_short_desc' => 'setProductShortDesc',
        'terms' => 'setTerms',
        'category_id' => 'setCategoryId',
        'category_nm' => 'setCategoryNm',
        'category_img' => 'setCategoryImg',
        'brand_redeem' => 'setBrandRedeem',
        'store_list' => 'setStoreList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_id' => 'getProductId',
        'product_nm' => 'getProductNm',
        'product_img' => 'getProductImg',
        'product_sub_img' => 'getProductSubImg',
        'brand_id' => 'getBrandId',
        'brand_nm' => 'getBrandNm',
        'product_type' => 'getProductType',
        'brand_name_slug' => 'getBrandNameSlug',
        'brand_phone' => 'getBrandPhone',
        'brand_address' => 'getBrandAddress',
        'brand_desc' => 'getBrandDesc',
        'brand_service_guide' => 'getBrandServiceGuide',
        'service_guide' => 'getServiceGuide',
        'brand_logo' => 'getBrandLogo',
        'link' => 'getLink',
        'prices' => 'getPrices',
        'name_slug' => 'getNameSlug',
        'product_desc' => 'getProductDesc',
        'product_short_desc' => 'getProductShortDesc',
        'terms' => 'getTerms',
        'category_id' => 'getCategoryId',
        'category_nm' => 'getCategoryNm',
        'category_img' => 'getCategoryImg',
        'brand_redeem' => 'getBrandRedeem',
        'store_list' => 'getStoreList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_nm', $data ?? [], null);
        $this->setIfExists('product_img', $data ?? [], null);
        $this->setIfExists('product_sub_img', $data ?? [], null);
        $this->setIfExists('brand_id', $data ?? [], null);
        $this->setIfExists('brand_nm', $data ?? [], null);
        $this->setIfExists('product_type', $data ?? [], null);
        $this->setIfExists('brand_name_slug', $data ?? [], null);
        $this->setIfExists('brand_phone', $data ?? [], null);
        $this->setIfExists('brand_address', $data ?? [], null);
        $this->setIfExists('brand_desc', $data ?? [], null);
        $this->setIfExists('brand_service_guide', $data ?? [], null);
        $this->setIfExists('service_guide', $data ?? [], null);
        $this->setIfExists('brand_logo', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('prices', $data ?? [], null);
        $this->setIfExists('name_slug', $data ?? [], null);
        $this->setIfExists('product_desc', $data ?? [], null);
        $this->setIfExists('product_short_desc', $data ?? [], null);
        $this->setIfExists('terms', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('category_nm', $data ?? [], null);
        $this->setIfExists('category_img', $data ?? [], null);
        $this->setIfExists('brand_redeem', $data ?? [], null);
        $this->setIfExists('store_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_id
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int|null $product_id Product Id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_nm
     *
     * @return string|null
     */
    public function getProductNm()
    {
        return $this->container['product_nm'];
    }

    /**
     * Sets product_nm
     *
     * @param string|null $product_nm Product Name
     *
     * @return self
     */
    public function setProductNm($product_nm)
    {
        if (is_null($product_nm)) {
            throw new \InvalidArgumentException('non-nullable product_nm cannot be null');
        }
        $this->container['product_nm'] = $product_nm;

        return $this;
    }

    /**
     * Gets product_img
     *
     * @return string|null
     */
    public function getProductImg()
    {
        return $this->container['product_img'];
    }

    /**
     * Sets product_img
     *
     * @param string|null $product_img Link product image
     *
     * @return self
     */
    public function setProductImg($product_img)
    {
        if (is_null($product_img)) {
            throw new \InvalidArgumentException('non-nullable product_img cannot be null');
        }
        $this->container['product_img'] = $product_img;

        return $this;
    }

    /**
     * Gets product_sub_img
     *
     * @return mixed[]|null
     */
    public function getProductSubImg()
    {
        return $this->container['product_sub_img'];
    }

    /**
     * Sets product_sub_img
     *
     * @param mixed[]|null $product_sub_img Array of link image
     *
     * @return self
     */
    public function setProductSubImg($product_sub_img)
    {
        if (is_null($product_sub_img)) {
            throw new \InvalidArgumentException('non-nullable product_sub_img cannot be null');
        }
        $this->container['product_sub_img'] = $product_sub_img;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return int|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param int|null $brand_id Brand id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if (is_null($brand_id)) {
            throw new \InvalidArgumentException('non-nullable brand_id cannot be null');
        }
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets brand_nm
     *
     * @return string|null
     */
    public function getBrandNm()
    {
        return $this->container['brand_nm'];
    }

    /**
     * Sets brand_nm
     *
     * @param string|null $brand_nm Brand name
     *
     * @return self
     */
    public function setBrandNm($brand_nm)
    {
        if (is_null($brand_nm)) {
            throw new \InvalidArgumentException('non-nullable brand_nm cannot be null');
        }
        $this->container['brand_nm'] = $brand_nm;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type c (cash) hoặc i (item)
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        if (is_null($product_type)) {
            throw new \InvalidArgumentException('non-nullable product_type cannot be null');
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets brand_name_slug
     *
     * @return string|null
     */
    public function getBrandNameSlug()
    {
        return $this->container['brand_name_slug'];
    }

    /**
     * Sets brand_name_slug
     *
     * @param string|null $brand_name_slug Slug of brand
     *
     * @return self
     */
    public function setBrandNameSlug($brand_name_slug)
    {
        if (is_null($brand_name_slug)) {
            throw new \InvalidArgumentException('non-nullable brand_name_slug cannot be null');
        }
        $this->container['brand_name_slug'] = $brand_name_slug;

        return $this;
    }

    /**
     * Gets brand_phone
     *
     * @return string|null
     */
    public function getBrandPhone()
    {
        return $this->container['brand_phone'];
    }

    /**
     * Sets brand_phone
     *
     * @param string|null $brand_phone Phone of brand
     *
     * @return self
     */
    public function setBrandPhone($brand_phone)
    {
        if (is_null($brand_phone)) {
            throw new \InvalidArgumentException('non-nullable brand_phone cannot be null');
        }
        $this->container['brand_phone'] = $brand_phone;

        return $this;
    }

    /**
     * Gets brand_address
     *
     * @return string|null
     */
    public function getBrandAddress()
    {
        return $this->container['brand_address'];
    }

    /**
     * Sets brand_address
     *
     * @param string|null $brand_address Address of brand
     *
     * @return self
     */
    public function setBrandAddress($brand_address)
    {
        if (is_null($brand_address)) {
            throw new \InvalidArgumentException('non-nullable brand_address cannot be null');
        }
        $this->container['brand_address'] = $brand_address;

        return $this;
    }

    /**
     * Gets brand_desc
     *
     * @return string|null
     */
    public function getBrandDesc()
    {
        return $this->container['brand_desc'];
    }

    /**
     * Sets brand_desc
     *
     * @param string|null $brand_desc Description of brand
     *
     * @return self
     */
    public function setBrandDesc($brand_desc)
    {
        if (is_null($brand_desc)) {
            throw new \InvalidArgumentException('non-nullable brand_desc cannot be null');
        }
        $this->container['brand_desc'] = $brand_desc;

        return $this;
    }

    /**
     * Gets brand_service_guide
     *
     * @return string|null
     */
    public function getBrandServiceGuide()
    {
        return $this->container['brand_service_guide'];
    }

    /**
     * Sets brand_service_guide
     *
     * @param string|null $brand_service_guide T&C of brand
     *
     * @return self
     */
    public function setBrandServiceGuide($brand_service_guide)
    {
        if (is_null($brand_service_guide)) {
            throw new \InvalidArgumentException('non-nullable brand_service_guide cannot be null');
        }
        $this->container['brand_service_guide'] = $brand_service_guide;

        return $this;
    }

    /**
     * Gets service_guide
     *
     * @return string|null
     */
    public function getServiceGuide()
    {
        return $this->container['service_guide'];
    }

    /**
     * Sets service_guide
     *
     * @param string|null $service_guide T&C of product
     *
     * @return self
     */
    public function setServiceGuide($service_guide)
    {
        if (is_null($service_guide)) {
            throw new \InvalidArgumentException('non-nullable service_guide cannot be null');
        }
        $this->container['service_guide'] = $service_guide;

        return $this;
    }

    /**
     * Gets brand_logo
     *
     * @return string|null
     */
    public function getBrandLogo()
    {
        return $this->container['brand_logo'];
    }

    /**
     * Sets brand_logo
     *
     * @param string|null $brand_logo Link to brand logo image
     *
     * @return self
     */
    public function setBrandLogo($brand_logo)
    {
        if (is_null($brand_logo)) {
            throw new \InvalidArgumentException('non-nullable brand_logo cannot be null');
        }
        $this->container['brand_logo'] = $brand_logo;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link link
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return \OpenAPI\Client\Model\PRODUCTPRICESCHEMA[]|null
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param \OpenAPI\Client\Model\PRODUCTPRICESCHEMA[]|null $prices prices
     *
     * @return self
     */
    public function setPrices($prices)
    {
        if (is_null($prices)) {
            throw new \InvalidArgumentException('non-nullable prices cannot be null');
        }
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets name_slug
     *
     * @return string|null
     */
    public function getNameSlug()
    {
        return $this->container['name_slug'];
    }

    /**
     * Sets name_slug
     *
     * @param string|null $name_slug Slug of product
     *
     * @return self
     */
    public function setNameSlug($name_slug)
    {
        if (is_null($name_slug)) {
            throw new \InvalidArgumentException('non-nullable name_slug cannot be null');
        }
        $this->container['name_slug'] = $name_slug;

        return $this;
    }

    /**
     * Gets product_desc
     *
     * @return string|null
     */
    public function getProductDesc()
    {
        return $this->container['product_desc'];
    }

    /**
     * Sets product_desc
     *
     * @param string|null $product_desc Product Description
     *
     * @return self
     */
    public function setProductDesc($product_desc)
    {
        if (is_null($product_desc)) {
            throw new \InvalidArgumentException('non-nullable product_desc cannot be null');
        }
        $this->container['product_desc'] = $product_desc;

        return $this;
    }

    /**
     * Gets product_short_desc
     *
     * @return string|null
     */
    public function getProductShortDesc()
    {
        return $this->container['product_short_desc'];
    }

    /**
     * Sets product_short_desc
     *
     * @param string|null $product_short_desc Product Short Description
     *
     * @return self
     */
    public function setProductShortDesc($product_short_desc)
    {
        if (is_null($product_short_desc)) {
            throw new \InvalidArgumentException('non-nullable product_short_desc cannot be null');
        }
        $this->container['product_short_desc'] = $product_short_desc;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return string|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param string|null $terms Terms of use
     *
     * @return self
     */
    public function setTerms($terms)
    {
        if (is_null($terms)) {
            throw new \InvalidArgumentException('non-nullable terms cannot be null');
        }
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id Category Id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_nm
     *
     * @return string|null
     */
    public function getCategoryNm()
    {
        return $this->container['category_nm'];
    }

    /**
     * Sets category_nm
     *
     * @param string|null $category_nm Category Name
     *
     * @return self
     */
    public function setCategoryNm($category_nm)
    {
        if (is_null($category_nm)) {
            throw new \InvalidArgumentException('non-nullable category_nm cannot be null');
        }
        $this->container['category_nm'] = $category_nm;

        return $this;
    }

    /**
     * Gets category_img
     *
     * @return string|null
     */
    public function getCategoryImg()
    {
        return $this->container['category_img'];
    }

    /**
     * Sets category_img
     *
     * @param string|null $category_img Category Image
     *
     * @return self
     */
    public function setCategoryImg($category_img)
    {
        if (is_null($category_img)) {
            throw new \InvalidArgumentException('non-nullable category_img cannot be null');
        }
        $this->container['category_img'] = $category_img;

        return $this;
    }

    /**
     * Gets brand_redeem
     *
     * @return \OpenAPI\Client\Model\BRANDREEDEMSCHEMA[]|null
     */
    public function getBrandRedeem()
    {
        return $this->container['brand_redeem'];
    }

    /**
     * Sets brand_redeem
     *
     * @param \OpenAPI\Client\Model\BRANDREEDEMSCHEMA[]|null $brand_redeem brand_redeem
     *
     * @return self
     */
    public function setBrandRedeem($brand_redeem)
    {
        if (is_null($brand_redeem)) {
            throw new \InvalidArgumentException('non-nullable brand_redeem cannot be null');
        }
        $this->container['brand_redeem'] = $brand_redeem;

        return $this;
    }

    /**
     * Gets store_list
     *
     * @return \OpenAPI\Client\Model\STORESSCHEMA[]|null
     */
    public function getStoreList()
    {
        return $this->container['store_list'];
    }

    /**
     * Sets store_list
     *
     * @param \OpenAPI\Client\Model\STORESSCHEMA[]|null $store_list store_list
     *
     * @return self
     */
    public function setStoreList($store_list)
    {
        if (is_null($store_list)) {
            throw new \InvalidArgumentException('non-nullable store_list cannot be null');
        }
        $this->container['store_list'] = $store_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


