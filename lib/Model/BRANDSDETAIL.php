<?php
/**
 * BRANDSDETAIL
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sample API
 *
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BRANDSDETAIL Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BRANDSDETAIL implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BRANDS_DETAIL';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brand_id' => 'int',
        'brand_nm' => 'string',
        'brand_logo' => 'string',
        'slug' => 'string',
        'short_desc' => 'mixed',
        'description' => 'string',
        'category_id' => 'mixed[]',
        'order' => 'int',
        'service_guide' => 'mixed',
        'stores' => '\OpenAPI\Client\Model\STORESSCHEMA[]',
        'usage_methods' => '\OpenAPI\Client\Model\USAGEMETHODSCHEMA[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'brand_id' => null,
        'brand_nm' => null,
        'brand_logo' => null,
        'slug' => null,
        'short_desc' => null,
        'description' => null,
        'category_id' => null,
        'order' => null,
        'service_guide' => null,
        'stores' => null,
        'usage_methods' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'brand_id' => true,
        'brand_nm' => true,
        'brand_logo' => true,
        'slug' => true,
        'short_desc' => true,
        'description' => true,
        'category_id' => true,
        'order' => true,
        'service_guide' => true,
        'stores' => false,
        'usage_methods' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand_id' => 'brandId',
        'brand_nm' => 'brandNm',
        'brand_logo' => 'brandLogo',
        'slug' => 'slug',
        'short_desc' => 'shortDesc',
        'description' => 'description',
        'category_id' => 'categoryID',
        'order' => 'order',
        'service_guide' => 'serviceGuide',
        'stores' => 'stores',
        'usage_methods' => 'usageMethods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand_id' => 'setBrandId',
        'brand_nm' => 'setBrandNm',
        'brand_logo' => 'setBrandLogo',
        'slug' => 'setSlug',
        'short_desc' => 'setShortDesc',
        'description' => 'setDescription',
        'category_id' => 'setCategoryId',
        'order' => 'setOrder',
        'service_guide' => 'setServiceGuide',
        'stores' => 'setStores',
        'usage_methods' => 'setUsageMethods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand_id' => 'getBrandId',
        'brand_nm' => 'getBrandNm',
        'brand_logo' => 'getBrandLogo',
        'slug' => 'getSlug',
        'short_desc' => 'getShortDesc',
        'description' => 'getDescription',
        'category_id' => 'getCategoryId',
        'order' => 'getOrder',
        'service_guide' => 'getServiceGuide',
        'stores' => 'getStores',
        'usage_methods' => 'getUsageMethods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('brand_id', $data ?? [], null);
        $this->setIfExists('brand_nm', $data ?? [], null);
        $this->setIfExists('brand_logo', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('short_desc', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('service_guide', $data ?? [], null);
        $this->setIfExists('stores', $data ?? [], null);
        $this->setIfExists('usage_methods', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand_id
     *
     * @return int|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param int|null $brand_id Brand id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if (is_null($brand_id)) {
            array_push($this->openAPINullablesSetToNull, 'brand_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets brand_nm
     *
     * @return string|null
     */
    public function getBrandNm()
    {
        return $this->container['brand_nm'];
    }

    /**
     * Sets brand_nm
     *
     * @param string|null $brand_nm Brand name
     *
     * @return self
     */
    public function setBrandNm($brand_nm)
    {
        if (is_null($brand_nm)) {
            array_push($this->openAPINullablesSetToNull, 'brand_nm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_nm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_nm'] = $brand_nm;

        return $this;
    }

    /**
     * Gets brand_logo
     *
     * @return string|null
     */
    public function getBrandLogo()
    {
        return $this->container['brand_logo'];
    }

    /**
     * Sets brand_logo
     *
     * @param string|null $brand_logo Link to brand logo image
     *
     * @return self
     */
    public function setBrandLogo($brand_logo)
    {
        if (is_null($brand_logo)) {
            array_push($this->openAPINullablesSetToNull, 'brand_logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_logo'] = $brand_logo;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug Brand name used for URL
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            array_push($this->openAPINullablesSetToNull, 'slug');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('slug', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets short_desc
     *
     * @return mixed|null
     */
    public function getShortDesc()
    {
        return $this->container['short_desc'];
    }

    /**
     * Sets short_desc
     *
     * @param mixed|null $short_desc Brand short description
     *
     * @return self
     */
    public function setShortDesc($short_desc)
    {
        if (is_null($short_desc)) {
            array_push($this->openAPINullablesSetToNull, 'short_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_desc'] = $short_desc;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return mixed[]|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param mixed[]|null $category_id Array containing a list of Categories codes to which the Brand belongs
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            array_push($this->openAPINullablesSetToNull, 'category_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order The serial number displays the brand
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets service_guide
     *
     * @return mixed|null
     */
    public function getServiceGuide()
    {
        return $this->container['service_guide'];
    }

    /**
     * Sets service_guide
     *
     * @param mixed|null $service_guide Describe the brand's terms of reference (T&C). HTML format
     *
     * @return self
     */
    public function setServiceGuide($service_guide)
    {
        if (is_null($service_guide)) {
            array_push($this->openAPINullablesSetToNull, 'service_guide');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_guide', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_guide'] = $service_guide;

        return $this;
    }

    /**
     * Gets stores
     *
     * @return \OpenAPI\Client\Model\STORESSCHEMA[]|null
     */
    public function getStores()
    {
        return $this->container['stores'];
    }

    /**
     * Sets stores
     *
     * @param \OpenAPI\Client\Model\STORESSCHEMA[]|null $stores stores
     *
     * @return self
     */
    public function setStores($stores)
    {
        if (is_null($stores)) {
            throw new \InvalidArgumentException('non-nullable stores cannot be null');
        }
        $this->container['stores'] = $stores;

        return $this;
    }

    /**
     * Gets usage_methods
     *
     * @return \OpenAPI\Client\Model\USAGEMETHODSCHEMA[]|null
     */
    public function getUsageMethods()
    {
        return $this->container['usage_methods'];
    }

    /**
     * Sets usage_methods
     *
     * @param \OpenAPI\Client\Model\USAGEMETHODSCHEMA[]|null $usage_methods Information on the brand's applicable channels
     *
     * @return self
     */
    public function setUsageMethods($usage_methods)
    {
        if (is_null($usage_methods)) {
            throw new \InvalidArgumentException('non-nullable usage_methods cannot be null');
        }
        $this->container['usage_methods'] = $usage_methods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


